#include "CLIntrinsics.h"

// loads cameras from the cameras.txt file generated by colmap
vector<CLIntrinsics> CLIntrinsics::loadCameras(string path)
{
	ifstream cameraData(path);

	char trash[10000];

	vector<CLIntrinsics> cameras;
	while (!cameraData.eof())
	{
		if (cameraData.peek() == '#') // comment
		{
			cameraData.getline(trash, 10000);
			continue;
		}

		int number;
		string type;
		cameraData >> number >> type;

		if (type != "OPENCV")
		{
			cameraData.getline(trash, 10000);
			continue;
		}

		int width, height;
		vector<double> params(8);
		cameraData >> width >> height;
		for (double p : params)
            cin >> p;

		cameras.push_back({width, height, params});
	}

	return cameras;
}

CLIntrinsics::CLIntrinsics(int width, int height, double fx, double fy, double cx, double cy,
                           double k1, double k2, double p1, double p2) : CLIntrinsics(width, height, {fx, fy, cx, cy, k1, k2, p1, p2}) {

}

CLIntrinsics::CLIntrinsics(int width, int height, vector<double> params) : width(width), height(height) {
    assert(params.size() == 8);
    fx = params[0];
    fy = params[1];
    cx = params[2];
    cy = params[3];
    k1 = params[4];
    k2 = params[5];
    p1 = params[6];
    p2 = params[7];
}

CLIntrinsics::CLIntrinsics(int width, int height, double focalLen) : CLIntrinsics(width, height, focalLen, focalLen, width / 2.0, height / 2.0) {

}
